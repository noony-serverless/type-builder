name: Publish to npm

on:
  # Trigger on version tags
  push:
    tags:
      - 'v*.*.*'

  # Allow manual workflow dispatch with version input
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.1)'
        required: false
        type: string
      dry_run:
        description: 'Perform a dry run (no actual publish)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure npm authentication
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Validate main branch CI status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const ciWorkflow = workflows.workflows.find(w => w.name === 'CI');
            if (!ciWorkflow) {
              throw new Error('CI workflow not found');
            }
            
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: ciWorkflow.id,
              branch: 'main',
              status: 'completed',
              per_page: 1
            });
            
            if (runs.workflow_runs.length === 0) {
              throw new Error('No completed CI runs found on main branch');
            }
            
            const latestRun = runs.workflow_runs[0];
            if (latestRun.conclusion !== 'success') {
              throw new Error(`Latest CI run on main branch failed with conclusion: ${latestRun.conclusion}`);
            }
            
            console.log(`✅ Latest CI run on main branch was successful (${latestRun.html_url})`);

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Run tests
        run: pnpm run test

      - name: Run linter
        run: pnpm run lint

      - name: Verify package contents
        run: |
          cd packages/builder
          pnpm pack --dry-run
          ls -la dist/

      - name: Publish to npm (dry run)
        if: ${{ inputs.dry_run == true }}
        run: |
          cd packages/builder
          pnpm publish --dry-run --access public --no-git-checks

      - name: Check if version already published
        id: check_version
        run: |
          cd packages/builder
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")

          if npm view "${PACKAGE_NAME}@${VERSION}" version 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ Version ${VERSION} already published to npm"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Version ${VERSION} not yet published"
          fi

      - name: Publish to npm
        if: ${{ inputs.dry_run != true && steps.check_version.outputs.exists != 'true' }}
        run: |
          cd packages/builder
          set +e  # Don't exit on error immediately
          OUTPUT=$(pnpm publish --access public --provenance --no-git-checks 2>&1)
          EXIT_CODE=$?
          echo "$OUTPUT"

          # Check if publish was successful or already published
          if [ $EXIT_CODE -eq 0 ]; then
            echo "✅ Successfully published to npm"
            exit 0
          elif echo "$OUTPUT" | grep -q "cannot publish over the previously published versions"; then
            echo "⚠️ Version already published (caught during publish)"
            exit 0
          elif echo "$OUTPUT" | grep -q "You cannot publish over the previously published versions"; then
            echo "⚠️ Version already published (caught during publish)"
            exit 0
          else
            echo "❌ Publish failed with exit code $EXIT_CODE"
            exit $EXIT_CODE
          fi

      - name: Already published notice
        if: ${{ inputs.dry_run != true && steps.check_version.outputs.exists == 'true' }}
        run: |
          echo "### ⚠️ Version Already Published" >> $GITHUB_STEP_SUMMARY
          echo "This version is already available on npm. Skipping publish step." >> $GITHUB_STEP_SUMMARY

      - name: Get package version
        id: package_version
        run: |
          cd packages/builder
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: ${{ inputs.dry_run != true && startsWith(github.ref, 'refs/tags/') }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## @noony-serverless/type-builder v${{ steps.package_version.outputs.version }}

            Published to npm: https://www.npmjs.com/package/@noony-serverless/type-builder/v/${{ steps.package_version.outputs.version }}

            ### Installation
            ```bash
            npm install @noony-serverless/type-builder@${{ steps.package_version.outputs.version }}
            # or with pnpm
            pnpm add @noony-serverless/type-builder@${{ steps.package_version.outputs.version }}
            ```

            See [CHANGELOG.md](CHANGELOG.md) for details.
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Summary
        if: ${{ inputs.dry_run != true }}
        run: |
          echo "### Published Successfully! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** @noony-serverless/type-builder" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.package_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**npm:** https://www.npmjs.com/package/@noony-serverless/type-builder" >> $GITHUB_STEP_SUMMARY
